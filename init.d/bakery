#!/bin/sh
#
# Init script for a non-forking program written by Mikko Kortelainen (thanks):
#
#   http://koo.fi/blog/2013/03/09/init-script-for-daemonizing-non-forking-processes/
 
### BEGIN INIT INFO
# Provides:          bakery
# Required-Start:    lirc
# Required-Stop:     lirc
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Use a Pi to make a Pi
### END INIT INFO
 
# Defaults
DAEMON_NAME="Bakery"
DAEMON_EXECUTABLE="/home/pi/Bakery/bakery.py"
DAEMON_OPTIONS=""
DAEMON_HOMEDIR="/home/pi/Bakery"
DAEMON_PIDFILE="/var/run/bakery.pid"
DAEMON_LOGFILE="/var/log/bakery.log"
INIT_SLEEPTIME="2"
 
# Defaults can be overridden in this file
DAEMON_DEFAULTS_FILE="/etc/default/my_daemon"
 
PATH=/sbin:/bin:/usr/sbin:/usr/bin
 
# Load alternate configuration if exists
test -f $DAEMON_DEFAULTS_FILE && . $DAEMON_DEFAULTS_FILE
 
. /lib/lsb/init-functions
 
# Usually no need to edit below this point. Just have these ready:
#
# * DAEMON_EXECUTABLE - full path to the executable
# * DAEMON_OPTIONS    - options to pass to the executable
# * DAEMON_NAME       - a decriptive name
# * DAEMON_HOMEDIR    - place where to cd before running
# * DAEMON_PIDFILE    - pid file name
# * DAEMON_LOGFILE    - log file name
# * INIT_SLEEPTIME    - how long to wait for startup and shutdown
#
# The rest will be taken care of. Executable is run with "nohup", so no
# need to fork.
 
is_running () {
  # Test whether pid file exists or not
  test -f $DAEMON_PIDFILE || return 1
 
  # Test whether process is running or not
  read PID < "$DAEMON_PIDFILE"
  ps -p $PID >/dev/null 2>&1 || return 1
 
  # Is running
  return 0
}
 
root_only () {
  if [ "$(id -u)" != "0" ]; then
    echo "Only root should run this operation"
    exit 1
  fi
}
 
run () {
  if is_running; then
    PID="$(cat $DAEMON_PIDFILE)"
    echo "Daemon is already running as PID $PID"
    return 1
  fi
 
  cd $DAEMON_HOMEDIR
 
  nohup $DAEMON_EXECUTABLE $DAEMON_OPTIONS >>$DAEMON_LOGFILE 2>&1 &
  echo $! > $DAEMON_PIDFILE
  read PID < "$DAEMON_PIDFILE"
 
  sleep $INIT_SLEEPTIME
  if ! is_running; then
    echo "Daemon died immediately after starting. Please check your logs and configurations."
    return 1
  fi
 
  echo "Daemon is running as PID $PID"
  return 0
}
 
stop () {
  if is_running; then
    read PID < "$DAEMON_PIDFILE"
    kill $PID
  fi
  sleep $INIT_SLEEPTIME
  if is_running; then
    while is_running; do
      echo "waiting for daemon to die (PID $PID)"
      sleep $INIT_SLEEPTIME
    done
  fi
  rm -f "$DAEMON_PIDFILE"
  return 0
}
 
case "$1" in
  start)
    root_only
    log_daemon_msg "Starting $DAEMON_NAME"
    run
    log_end_msg $?
    ;;
  stop)
    root_only
    log_daemon_msg "Stopping $DAEMON_NAME"
    stop
    log_end_msg $?
    ;;
  restart)
    root_only
    $0 stop && $0 start
    ;;
  status)
    status_of_proc \
      -p "$DAEMON_PIDFILE" \
      "$DAEMON_EXECUTABLE" \
      "$DAEMON_NAME" \
      && exit 0 \
      || exit $?
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
  ;;
esac
